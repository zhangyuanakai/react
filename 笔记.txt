1、移动端响应式布局开发  一定要设置的
<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    - width=device-width HTML的渲染宽度保持一致
    - initial-scale=1.0  可视化区域缩小比例
如果不设置，浏览器会按照980的宽度渲染页面；手机宽度不足980，整个页面就会整体缩小。

实现REM响应式布局开发的步骤
1、找参照的比例（例如设计稿的比例  ->  一般都是750px）,在这个比例下给予html.font-size一个初始值。
  html{
  font-size:100px
  750px设计稿中，1rem=100px
  未来我们需要从设计稿测量出尺寸（PX单位）转换为REM单位去设置样式
  }

2、我们需要根据当前设备的宽度，计算相对于设计稿750来讲，缩放的比例；从而REM的转换比例，也跟着缩放【rem和px换算比例一改，则所有之前的以rem为单位的样式也会缩放】
3、我们一般还会给页面设置最大的宽度【750px】，超过这个宽度，不再让REM比例继续大了；内容居中，左右两边空出来即可



组件抽离封装的思路

1、公用的：善于发现公用性的眼睛
2、一个页面内容太多


在真实项目中，我们的组件：
1、普通业务组件   spa中的一个个组件  src/views
2、通用业务性组件   好多页面中都需要的，我们提取成公共的组件  src/components
  特色亮点，善于发现通用的部分，进行封装和提取
  保证更强的复用性：插槽、属性
3、通用功能性组件：一般都是UI组件库有的
偶尔有部分UI组件库中没有或者不支持的，才需要自己进行封装！！例如：大文件切片上传和断点续传！
【UI库中，一般文件处理类，影音类的比较匮乏】
  但是我们一般会对UI组件库中的组件，进行二次封装
  +统一处理复杂的业务逻辑
  +统一处理样式
  +几个组件做成一个整体组件
  ……


在JSX视图中，想要直接导入静态资源图片，不能这样设置相对地址：
   <img src="../assets/images" alt="" />

 因为经过webpack打包处理，项目的结构目录是改变的
但是JSX中导入的地址还是还是我们写的地址。
这样就找不到图片了
但是如果是在CSS样式中，我们使用图片，是可以使用相对地址的：因为webpaccl打包的时候，会处理css找那个的图片导入：
1、把需要的是图进行打包
2、把打包的地址重新覆盖css中写的地址


在视图中，我们应该如何处理？？
解决一：使用绝对地址
 <img src="http……" alt="" />
 图片部署到服务器了，即便webpack不处理，打包后，也是服务器获取图片渲染！！
解决二
基于ES6Module模式方式，导入图片
具体看/Users/zhangyuankai/Desktop/demo/hahaha/src/components/HomeHead.jsx 、第二行
import timg from '../assets/images/11181.jpg'
 <img src={timg} alt="" />



 基于数据控制元素显示隐藏：
 1、控制其是否渲染
   没有数据可以不渲染，【结构中找不到它，也获取不到DOM元素】
   有数据在渲染
 2、控制元素的样式  display  v-show
    不管是否有数据，都会进行渲染，只不过没有数据 则样式为none  【可以获取DOM元素】

    ==========
    正常情况下，对于显示隐藏不经常变化的操作来讲，我们应该采用方案1，这样可以优化性能，尤其是在组件第一次渲染的时候，没有数据的情况下，
    我们可以少渲染很多东西，加快页面第一次呈现的速度

    对于选项卡这样的频繁擦欧哦，我们应该用第二种方案。只是改变样式，不要去频繁创建和销毁元素


如果我们想获取元素，但是还不想其展示只能用2方案

